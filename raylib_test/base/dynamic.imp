@import "base/memory.imp";
@import "base/utils.imp";

struct[T] dyn :: {
    ^$T data;
    usize len;
    usize cap;
}

dyn(typeid T) dyn_new :: {
    dyn[T] new;
    new.len: 0;
    new.cap: 32;
    @c [new.data = alloc(new.cap, sizeof(T));];
    @c [if (new.data == NULL) exit(1);];
    return new;
}

option(typeid T dyn[T] arr usize index) dyn_at :: {
    option[T] ret;
    ret.none: false;

    if (index >= arr.len) {
        ret.none: true;
        return ret;
    }

    ret.value: arr.data[index];
    return ret;
}

_(typeid T dyn[T] arr $T elem) dyn_push :: {
    if ([arr.len + 1] >= arr.cap) {
        arr.cap: [arr.cap + [arr.len + 1] * 2];
        @c [arr.data = re_alloc(arr.data, arr.cap * sizeof(T));];
    }

    arr.data[arr.len]: elem;
    arr.len: [arr.len + 1];
}

_(typeid T dyn[T] arr) dyn_clear :: {
    dealloc(arr.data);
    arr: dyn_new(T);
}

_ dyn_remove(typeid T dyn[T] arr usize index) :: {
    @c [mem_move(&arr.data[index], &arr.data[index + 1], (arr.len - index - 1) * sizeof(T));];
    arr.len: [arr.len - 1];
}
