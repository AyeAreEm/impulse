# Memory allocated string with length and null terminated for easy C interopability

@import "base/builtin.imp";
@import "base/memory.imp";

@inline ^char c.strncpy :: (^char dest ^char src usize byte_size) {
    # doubt i could write safe code that copies strings
    @c [ return strncpy(dest, src, byte_size); ];
}

struct string :: {
    ^char data;
    usize cap;
    usize len;
    
    string new :: () {
        string new;
        new.len: 0;
        new.cap: 32; # including null terminator
        new.data: mem.alloc(char new.cap);
        @c [
            if (new.data == NULL) {
                fprintf(stderr, "error: failed to allocate memory in %s at line %d\n", __FILE__, __LINE__);
                fprintf(stderr, "error: please take a look at the c file for more info\n");
                exit(1);
            }
        ];

        return new;
    }

    string with_capacity :: (usize cap) {
        string new;
        new.len: 0;
        new.cap: cap;
        new.data: mem.alloc(char new.cap);
        @c [
            if (new.data == NULL) {
                fprintf(stderr, "error: failed to allocate memory in %s at line %d\n", __FILE__, __LINE__);
                fprintf(stderr, "error: please take a look at the c file for more info\n");
                exit(1);
            }
        ];
        return new;
    }

    _ resize :: (^string word usize modifier) {
        word.cap: [[word.cap + modifier] * 2];
        word.data: mem.realloc(word.data word.cap);
    }

    #_ copy :: (^char dest ^char src usize byte_size) {
    #    cstr.copy(dest src byte_size);
    #    @c [dest[*dest-1] = '\0';];
    #}

    string clone :: (string src) {
        string new: string.with_capacity(src.cap);
        mem.copy(new.data src.data new.cap);
        new.len: src.len;
        new.data[new.len]: '\0';
        return new;
    }

    string from :: (^char word) {
        string new: string.new();
        usize cstr_len: c.strlen(word);

        if ([cstr_len + 1] >= new.cap) {
            string.resize(&new [cstr_len + 1]);
        }

        new.len: cstr_len;
        mem.copy(new.data word new.cap);

        new.data[new.len]: '\0';
        return new;
    }

    _ push_char :: (^string word char ch) {
        usize new_len: [word.len + 1];

        if (new_len >= word.cap) {
            string.resize(word 0);
        }

        word.data[word.len]: ch;
        word.len: new_len;
        word.data[word.len]: '\0';
    }

    _ push_cstr :: (^string dest ^char src) {
        usize src_len: c.strlen(src);
        usize new_len: [dest.len + src_len];

        if ([new_len + 1] >= dest.cap) {
            string.resize(dest [new_len + 1]);
        }

        ^_ end_data: [dest.data + dest.len];
        mem.copy(end_data src src_len);

        dest.len: new_len;
        dest.data[dest.len]: '\0';
    }

    _ push_string :: (^string dest string src) {
        usize new_len :: [dest.len + src.len];

        if ([new_len + 1] >= dest.cap) {
            string.resize(dest [new_len + 1]);
        }

        ^_ end_data: [dest.data + dest.len];
        mem.copy(end_data src.data src.len);

        dest.len: new_len;
        dest.data[dest.len]: '\0';
    }

    _ push_str :: (^string dest str src) {
        usize new_len :: [dest.len + src.len];
        
        if ([new_len + 1] >= dest.cap) {
            string.resize(dest [new_len + 1]);
        }

        ^_ end_data: [dest.data + dest.len];
        mem.copy(end_data src.data src.len);
        
        dest.len: new_len;
        dest.data[dest.len]: '\0';
    }

    _ push :: (^string dest typeid T $T src) {
        $T real_var: src;

        if (type.compare(T string)) {
            string.push_string(dest cast(string real_var));
        } orif (type.compare(T char)) {
            string.push_char(dest cast(char real_var));
        } orif (type.compare(T ^char)) {
            string.push_cstr(dest cast(^char real_var));
        } orif (type.compare(T str)) {
            string.push_str(dest cast(str real_var));
        } else {
            println("%s is not supported for pushing to a string" type.to_cstr(T));
            exitcode(1);
        }
    }

    bool compare :: (string first string second) {
        if (first.len != second.len) {
            return false;
        }

        for (first) [ch i] {
            if (ch = second.data[i]) {
                return false;
            }
        }

        return true;
    }

    option[char] at :: (string word usize index) {
        option[char] ret;

        if (index >= word.len) {
            ret.none: true;
            return ret;
        }

        ret.value: word.data[index];
        return ret;
    }

    bool starts_with :: (string word char ch) {
        option[char] first_letter_op: string.at(word 0);
        if (first_letter_op.none) {
            return false;
        }
        if (first_letter_op.value != ch) {
            return false;
        }

        return true;
    }

    bool ends_with :: (string word char ch) {
        option[char] last_letter_op: string.at(word [word.len - 1]);
        if (last_letter_op.none) {
            return false;
        }
        if (last_letter_op.value != ch) {
            return false;
        }
        return true;
    }

    _ to_lowercase :: (string word) {
        for (word) [ch i] {
            word.data[i]: @c [tolower(ch)];
        }
    }
    
    _ to_uppercase :: (string word) {
        for (word) [ch i] {
            word.data[i]: @c [toupper(ch)];
        }
    }

    _ replace_char :: (string word char from char to) {
        for (word) [ch i] {
            if (ch = from) {
                word.data[i]: to;
            }
        }
    }

    bool replace_index :: (str word usize index char to) {
        option[char] at_index: str.at(word index);
        if (at_index.none = true) {
            return false;
        }

        word.data[index]: to;
        return true;
    }


    #bool contains :: (string str ^char pattern) {}
    
    _ clear :: (^string word) {
        word.data[0]: '\0';
        word.len: 0;
    }

    _ dealloc :: (^string word) {
        mem.dealloc(word.data);
        word.len: 0;
        word.cap: 0;
    }
}

# this function is handled in the compiler but you can see the code for it below
# returns an empty string if there's an error
_ string.format :: () { }

# string.format();
@c [
string __IMPULSE__STRING__FORMAT__(char* fmt, ...) {
    string result = string__new();

    va_list args;
    va_start(args, fmt);

    int size = vsnprintf(NULL, 0, fmt, args);
    if (size <= 0) {
        va_end(args);
        return result;
    }

    if ((usize)size + 1 >= result.cap) {
        string__resize(&result, size + 1);
    }

    vsnprintf(result.data, size + 1, fmt, args);
    va_end(args);

    result.len = size;
    return result;
}
];
