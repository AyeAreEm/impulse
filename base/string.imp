@import "base/memory.imp";

struct string: {
    ^char data;
    int cap;
    int len;
}

int(^char str) c_strlen: {
    @c [ return strlen(str);];
}

int(^char dest int byte_size ^char src) str_copy: {
    @c [return strcpy_s(dest, byte_size, src);];
}

string() str_new: {
    string new;
    new.len: 0;
    new.cap: 50;
    new.data: alloc(new.cap 1);
    @c [
        if (new.data == NULL) {
            exit(1);
        }
    ];

    return new;
}

_(^string str int modifier) str_resize: {
    if ([str.len + modifier] >= str.cap) {
        int increase: [[str.len + modifier] * 2];
        str.cap: [str.cap + increase];
    }

    int new_size: [str.cap + 1];
    str.data: re_alloc(str.data new_size);
}

string(^char str) str_from: {
    string new: str_new();

    int size: c_strlen(str);
    if (size > new.cap) {
        str_resize(&new 0);
    }

    new.len: c_strlen(str);
    str_copy(new.data [new.cap + 1] str);
    return new;
}
