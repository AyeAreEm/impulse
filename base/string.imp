@import "base/memory.imp";
@import "stdio.h";

struct string: {
    ^char data;
    int cap;
    int len;
}

int(^char str) c_strlen: {
    # maybe just write out the code instead of making a function that calls a function
    # func calls are more expensive than rewriting
    @c [ return strlen(str);];
}

int(^char dest int byte_size ^char src) cstr_copy: {
    # doubt i could write safe code that copies strings
    @c [return strcpy_s(dest, byte_size, src);];
}

string() str_new: {
    string new;
    new.len: 0;
    new.cap: 50;
    new.data: alloc(new.cap 1);
    @c [
        if (new.data == NULL) {
            exit(1);
        }
    ];

    return new;
}

_(^string str int modifier) str_resize: {
    int increase: [[str.len + modifier] * 2];
    str.cap: [str.cap + increase];

    int new_size: [str.cap + 1];
    str.data: re_alloc(str.data new_size);
}

string(^char str) str_from: {
    string new: str_new();
    int cstr_len: c_strlen(str);

    if (cstr_len > new.cap) {
        str_resize(&new cstr_len);
    }

    new.len: cstr_len;
    cstr_copy(new.data [new.cap + 1] str);
    return new;
}

# string_cmp here

_(^string str char ch) str_push: {
    if ([str.len + 1] >= str.cap) {
        str_resize(str 0);
    }

    str.data[str.len]: ch;
    str.len: [str.len + 1];
}

_(^string dest ^string src) str_pushstr: {
    if ([dest.len + src.len] >= dest.cap) {
        str_resize(dest src.len);
    }

    loop (i < src.len) [+] {
        dest.data[dest.len]: src.data[i];
        dest.len: [dest.len + 1];
    }
}

char(^string str) str_pop: {
    str.len: [str.len - 1];
    char ch: str.data[str.len];
    return ch;
}

_(^string str) str_clear: {
    free_mem(str.data);
    
    str.len: 0;
    str.cap: 50;
    str.data: alloc(str.cap 1);
    @c [
        if (str->data == NULL) {
            // need to give back an error instead
            exit(1);
        }
    ];
}

int(string str) str_to_int: {
    # this needs to be a i64
    i32 num;
    loop (i < str.len) [+] {
        @c [num = (num * 10) + (str.data[i] - '0');];
    }

    @c [
        if (num >= INT_MIN && num <= INT_MAX) {
            return (int)num;
        } else {
            exit(1);
        }
    ];
}

^char(string str) str_to_cstr: {
    if (str.len = 0) {
        ^char cstr: alloc(1 1);
        @c [
            if (cstr == NULL) {
                exit(1);
            }

            cstr[0] = '\0';
        ];
        return cstr;
    }

    ^char cstr: alloc([str.len+1] 1);
    @c [cstr[str.len] = '\0';];
    return cstr;
}

_(string str) str_print: {
    loop (i < str.len) [+] {
        @c [printf("%c", str.data[i]);];
    }

    @c [printf("\n");];
}
