# TODO: change this to be OS dependant

@c [#include "base/raylib/include/raylib.h"];
@import "base/math.imp";

# copy this in c_flags
# -I base/raylib/include/ -L base/raylib/lib -lraylib -lopengl32 -lgdi32 -lwinmm

@inline f32 deg_to_rad :: () {
    return [pi / 180.0];
}
@inline f32 rad_to_deg :: () {
    return [180.0 / pi];
}

# Colour, 4 components, R8G8B8A8 (32bits)
struct rl.Color :: {
    u8 r; # Color red value
    u8 g; # Color green value
    u8 b; # Color blue value
    u8 a; # Color alpha value
}

# Some Basic Colors
# NOTE: Custom raylib color palette for amazing visuals on WHITE background
rl.Color rl.LIGHTGRAY  :: |200 200 200 255|;
rl.Color rl.GRAY       :: |130 130 130 255|;
rl.Color rl.DARKGRAY   :: |80 80 80 255|;
rl.Color rl.YELLOW     :: |253 249 0 255|;
rl.Color rl.GOLD       :: |255 203 0 255|;
rl.Color rl.ORANGE     :: |255 161 0 255|;
rl.Color rl.PINK       :: |255 109 194 255|;
rl.Color rl.RED        :: |230 41 55 255|;
rl.Color rl.MAROON     :: |190 33 55 255|;
rl.Color rl.GREEN      :: |0 228 48 255|;
rl.Color rl.LIME       :: |0 158 47 255|;
rl.Color rl.DARKGREEN  :: |0 117 44 255|;
rl.Color rl.SKYBLUE    :: |102 191 255 255|;
rl.Color rl.BLUE       :: |0 121 241 255|;
rl.Color rl.DARKBLUE   :: |0 82 172 255|;
rl.Color rl.PURPLE     :: |200 122 255 255|;
rl.Color rl.VIOLET     :: |135 60 190 255|;
rl.Color rl.DARKPURPLE :: |112 31 126 255|;
rl.Color rl.BEIGE      :: |211 176 131 255|;
rl.Color rl.BROWN      :: |127 106 79 255|;
rl.Color rl.DARKBROWN  :: |76 63 47 255|;

rl.Color rl.WHITE      :: |255 255 255 255|;
rl.Color rl.BLACK      :: |0 0 0 255|;
rl.Color rl.BLANK      :: |0 0 0 0|; # Blank (Transparent)
rl.Color rl.MAGENTA    :: |255 0 255 255|;
rl.Color rl.RAYWHITE   :: |245 245 245 255|; # (raylib logo)

typeid rl.Vector2 :: Vector2f32;
typeid rl.Vector3 :: Vector3f32;
typeid rl.Vector4 :: Vector4f32;
typeid rl.Quaternion :: rl.Vector4;
typeid rl.Matrix :: Matrix4x4f32;

# Rectangle, 4 components
struct rl.Rectangle :: {
    f32 x;      # Rectangle top-left corner position x
    f32 y;      # Rectangle top-left corner position y
    f32 width;  # Rectangle width
    f32 height; # Rectangle height
}

# Image, pixel data stored in CPU memory (RAM)
struct rl.Image :: {
    ^_ data;
    int width;
    int height;
    int mipmaps;
    int format;
}

# Texture, tex data stored in GPU memory (VRAM)
struct rl.Texture :: {
    uint id; # OpenGl texture id
    int width; # Texture base width
    int height; # Texture base height
    int mipmaps; # Mipmap levels, 1 by default
    int format; # Data format (PixelFormat type)
}

# Texture2D, same as Texture
typeid rl.Texture2D :: rl.Texture;

# TextureCubemap, same as Texture
typeid rl.TextureCubemap :: rl.Texture2D;

# RenderTexture, fbo for texture rendering
struct rl.RenderTexture :: {
    uint id;            # OpenGL framebuffer object id
    rl.Texture texture; # Color buffer attachment texture
    rl.Texture depth;   # Depth buffer attachment texture
}

# RenderTexutre2D, same as RenderTexture
typeid rl.RenderTexture2D :: rl.RenderTexture;

# NPatchInfo, n-patch layout info
struct rl.NPathInfo :: {
    rl.Rectangle source;
    int left;
    int top;
    int right;
    int bottom;
    int layout;
}

# GlyphInfo, font characters glyphs info
struct rl.GlyphInfo :: {
    int value;
    int offsetX;
    int offsetY;
    int advanceX;
    rl.Image image;
}

# Font, font texture and GlyphInfo array data
struct rl.Font :: {
    int baseSize;
    int glyphCount;
    int glyphPadding;
    rl.Texture texture;
    ^rl.Rectangle recs;
    ^rl.GlyphInfo glyphs;
}

# Camera, defines position/orientation in 3d space
struct rl.Camera3D :: {
    Vector3f32 position;
    Vector3f32 target;
    Vector3f32 up;
    f32 fovy;
    int projection;
}

# Camera type fallback, defaults to Camera3D
typeid rl.Camera :: rl.Camera3D;

# Camera2D, defines position/orientation in 2d space
struct rl.Camera2D :: {
    Vector2f32 offset;
    Vector2f32 target;
    f32 rotation;
    f32 zoom;
}

# Mesh, vertex data and vao/vbo
struct rl.Mesh :: {
    int vertexCount;
    int triangleCount;

    ^f32 vertices;
    ^f32 texcoords;
    ^f32 texcoords2;
    ^f32 normals;
    ^f32 tangents;
    ^u8 colors;
    ^u16 indices;

    ^f32 animVerticles;
    ^f32 animNormals;
    ^u8 boneIds;
    ^f32 boneWeights;

    uint vaoId;
    ^uint vboId;
}

# Shader
struct rl.Shader :: {
    uint id;
    ^int locs;
}

# MaterialMap
struct rl.MaterialMap :: {
    rl.Texture2D texture;
    rl.Color color;
    f32 value;
}

# Material, includes shader and maps
struct rl.Material :: {
    rl.Shader shader;
    ^rl.MaterialMap maps;
    ^f32 params; # 4
}

# Transform, vertex transformation data
struct rl.Transform :: {
    rl.Vector3 translation;
    rl.Quaternion rotation;
    rl.Vector3 scale;
}

# Bone, skeletal animation bone
struct rl.BoneInfo :: {
    ^char name; #name
    int parent;
}

# Model, meshes, materials and animation data
struct rl.Model :: {
    rl.Matrix transform;

    int meshCount;
    int materialCount;
    ^rl.Mesh meshes;
    ^rl.Material materials;
    ^int meshMaterial;

    # Animation data
    int boneCount;
    ^rl.BoneInfo bones;
    ^rl.Transform bindPose;
}

# ModelAnimation
struct rl.ModelAnimation :: {
    int bouneCount;
    int frameCount;
    ^rl.BoneInfo bones;
    ^^rl.Transform framePoses;
    ^char name; # 32
}

# Ray, ray for raycasting
struct rl.Ray :: {
    rl.Vector3 position;
    rl.Vector3 direction;
}

# RayCollision, ray hit information
struct rl.RayCollision :: {
    bool hit;
    f32 distance;
    rl.Vector3 point;
    rl.Vector3 normal;
}

# BoundingBox
struct rl.BoundingBox :: {
    rl.Vector3 min;
    rl.Vector3 max;
}

# Wave, audio wave data
struct rl.Wave :: {
    uint frameCount;
    uint sampleRate;
    uint sampleSize;
    uint channels;
    ^_ data;
}

struct rl.rAudioBuffer :: {}
struct rl.rAudioProcessor :: {}

struct rl.AudioStream :: {
    ^rl.rAudioBuffer buffer;
    ^rl.rAudioProcessor processor;

    uint sampleRate;
    uint sampleSize;
    uint channels;
}

struct rl.Sound :: {
    rl.AudioStream stream;
    uint frameCount;
}

# Music, audio stream, anything longer than ~10 seconds should be streamed
struct rl.Music :: {
    rl.AudioStream stream;
    uint frameCount;
    bool looping;

    int ctxType;
    ^_ ctxData;
}

struct rl.VrDeviceInfo :: {
    int hResolution;
    int vResolution;
    f32 hScreenSize;
    f32 vScreenSize;
    f32 vScreenCenter;
    f32 eyeToScreenDistance;
    f32 lensSeparationDistance;
    f32 interpupillaryDistance;
    ^f32 lensDistortionValues; # 4
    ^f32 chromaAbCorrection; # 4
}

struct rl.VrStereoConfig :: {
    ^rl.Matrix projection; # 2
    ^rl.Matrix viewOffset; # 2
    ^f32 leftLensCenter; # 2
    ^f32 rightLensCenter; # 2
    ^f32 leftScreenCenter; # 2
    ^f32 rightScreenCenter; # 2
    ^f32 scale; # 2
    ^f32 scaleIn; # 2
}

struct rl.FilePathList :: {
    uint capacity;
    uint count;
    ^^char paths;
}

struct rl.AutomationEvent :: {
    uint frame;
    uint type;
    ^int params; # 4
}

struct rl.AutomationEvenList :: {
    uint capacity;
    uint count;
    ^rl.AutomationEvent events;
}

enum rl.ConfigFlags :: {
    VSYNC_HINT :: 64;
    FULLSCREEN_MODE :: 2;
    WINDOW_RESIZABLE :: 4;
    WINDOW_UNDECORATED :: 8;
    WINDOW_HIDDEN :: 128;
    WINDOW_MINIMIZED :: 512;
    WINDOW_MAXIMIZED :: 1024;
    WINDOW_UNFOCUSED :: 2048;
    WINDOW_TOPMOST :: 4096;
    WINDOW_ALWAYS_RUN :: 256;
    WINDOW_TRANSPARENT :: 16;
    WINDOW_HIGHDPI :: 8192;
    WINDOW_MOUSE_PASSTHROUGH :: 16384;
    BORDERLESS_WINDOW_MODE :: 32768;
    MSAA_4X_HINT :: 32;
    INTERLACED_HINT :: 65536;
}

enum rl.TraceLogLevel :: {
    ALL :: 0;
    TRACE;
    DEBUG;
    INFO;
    WARNING;
    ERROR;
    FATAL;
    NONE;
}

enum rl.KeyboardKey :: {
    KEY_NULL :: 0;
    APOSTROPHE :: 39; # '
    COMMA :: 44; # ,
    MINUS :: 45; # -
    PERIOD :: 46; # .
    SLASH :: 47; # /
    ZERO :: 48;
    ONE :: 49;
    TWO :: 50;
    THREE :: 51;
    FOUR :: 52;
    FIVE :: 53;
    SIX :: 54;
    SEVEN :: 55;
    EIGHT :: 56;
    NINE :: 57;
    SEMICOLON :: 59;
    EQUAL :: 61;
    A :: 65;
    B :: 66;
    C :: 67;
    D :: 68;
    E :: 69;
    F :: 70;
    G :: 71;
    H :: 72;
    I :: 73;
    J :: 74;
    K :: 75;
    L :: 76;
    M :: 77;
    N :: 78;
    O :: 79;
    P :: 80;
    Q :: 81;
    R :: 82;
    S :: 83;
    T :: 84;
    U :: 85;
    V :: 86;
    W :: 87;
    X :: 88;
    Y :: 89;
    Z :: 90;
    LEFT_BRACKET :: 91; # [
    BACKSLASH :: 92;
    RIGHT_BRACKET :: 93; # ]
    GRAVE :: 96; # `
    # Function keys
    SPACE :: 32;
    ESCAPE :: 256;
    ENTER :: 257;
    TAB :: 258;
    BACKSPACE :: 259;
    INSERT :: 260;
    DELETE :: 261;
    RIGHT :: 262; # Cursor right
    LEFT :: 263; # Cursor left
    DOWN :: 264; # Cursor down
    UP :: 265; # Cursor up
    PAGE_UP :: 266;
    PAGE_DOWN :: 267;
    HOME :: 268;
    END :: 269;
    CAPS_LOCK :: 280;
    SCROLL_LOCK :: 281;
    NUM_LOCK :: 282;
    PRINT_SCREEN :: 283;
    PAUSE :: 284;
    F1 :: 290;
    F2 :: 291;
    F3 :: 292;
    F4 :: 293;
    F5 :: 294;
    F6 :: 295;
    F7 :: 296;
    F8 :: 297;
    F9 :: 298;
    F10 :: 299;
    F11 :: 300;
    F12 :: 301;
    LEFT_SHIFT :: 340;
    LEFT_CONTROL :: 341;
    LEFT_ALT :: 342;
    LEFT_SUPER :: 343;
    RIGHT_SHIFT :: 344;
    RIGHT_CONTROL :: 345;
    RIGHT_ALT :: 346;
    RIGHT_SUPER :: 347;
    KB_MENU :: 348;
    # Keypad keys
    KP_0 :: 320;
    KP_1 :: 321;
    KP_2 :: 322;
    KP_3 :: 323;
    KP_4 :: 324;
    KP_5 :: 325;
    KP_6 :: 326;
    KP_7 :: 327;
    KP_8 :: 328;
    KP_9 :: 329;
    KP_DECIMAL :: 330;
    KP_DIVIDE :: 331;
    KP_MULTIPLY :: 332;
    KP_SUBSTRACT :: 333;
    KP_ADD :: 334;
    KP_ENTER :: 335;
    KP_EQUAL :: 336;
    # Andriod key buttons
    BACK :: 4;
    MENU :: 82;
    VOLUME_UP :: 24;
    VOLUME_DOWN :: 25;
}

enum rl.MouseButton :: {
    LEFT :: 0;
    RIGHT :: 1;
    MIDDLE :: 2;
    SIDE :: 3;
    EXTRA :: 4;
    FORWARD :: 5;
    BACK :: 6;
}

enum rl.MouseCursor :: {
    DEFAULT :: 0;       # Default pointer shape
    ARROW :: 1;         # Arrow shape
    IBEAM :: 2;         # Text writing cursor shape
    CROSSHAIR :: 3;     # Cross shape
    POINTING_HAND :: 4; # Pointing hand cursor
    RESIZE_EW :: 5;     # Horizontal resize/move arrow shape
    RESIZE_NS :: 6;     # Vertical resize/move arrow shape
    RESIZE_NWSE :: 7;   # Top-left to bottom-right shape
    RESIZE_NESW :: 8;   # The top-right to bottom-left diagonal resize/move arrow shape
    RESIZE_ALL :: 9;    # The omnidirectional resize/move cursor shape
    NOT_ALLOWED :: 10;  # The operation-not-allowed shape
}

enum rl.GamepadButton :: {
    UNKNOWN :: 0;
    LEFT_FACE_UP;
    LEFT_FACE_RIGHT;
    LEFT_FACE_DOWN;
    LEFT_FACE_LEFT;
    RIGHT_FACE_UP;
    RIGHT_FACE_RIGHT;
    RIGHT_FACE_DOWN;
    RIGHT_FACE_LEFT;
    LEFT_TRIGGER_1;
    LEFT_TRIGGER_2;
    RIGHT_TRIGGER_1;
    RIGHT_TRIGGER_2;
    MIDDLE_LEFT;
    MIDDLE;
    LEFT_THUMB;
    RIGHT_THUMNB;
}

enum rl.GamepadAxis :: {
    LEFT_X :: 0;
    LEFT_Y :: 1;
    RIGHT_X :: 2;
    RIGHT_Y :: 3;
    LEFT_TRIGGER :: 4;
    RIGHT_TRIGGER :: 5;
}

enum rl.MaterialMapIndex :: {
    ALBEDO :: 0;
    METALNESS;
    NORMAL;
    ROUGHNESS;
    OCCLUSION;
    EMISSION;
    HEIGHT;
    CUBEMAP;
    IRRADIANCE;
    PREFILTER;
    BRDF;
}

#typeid rl.MaterialMapIndex.DIFFUSE :: rl.MaterialMapIndex.ALBEDO;
#typeid rl.MaterialMapIndex.SPECULAR :: rl.MaterialMapIndex.METALNESS;

enum rl.ShaderLocationIndex :: {
    VERTEX_POSITION :: 0; # Shader location: vertex attribute: position
    VERTEX_TEXCOORD01;    # Shader location: vertex attribute: texcoord01
    VERTEX_TEXCOORD02;    # Shader location: vertex attribute: texcoord02
    VERTEX_NORMAL;        # Shader location: vertex attribute: normal
    VERTEX_TANGENT;       # Shader location: vertex attribute: tangent
    VERTEX_COLOR;         # Shader location: vertex attribute: color
    MATRIX_MVP;           # Shader location: matrix uniform: model-view-projection
    MATRIX_VIEW;          # Shader location: matrix uniform: view (camera transform)
    MATRIX_PROJECTION;    # Shader location: matrix uniform: projection
    MATRIX_MODEL;         # Shader location: matrix uniform: model (transform)
    MATRIX_NORMAL;        # Shader location: matrix uniform: normal
    VECTOR_VIEW;          # Shader location: vector uniform: view
    COLOR_DIFFUSE;        # Shader location: vector uniform: diffuse color
    COLOR_SPECULAR;       # Shader location: vector uniform: specular color
    COLOR_AMBIENT;        # Shader location: vector uniform: ambient color
    MAP_ALBEDO;           # Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
    MAP_METALNESS;        # Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
    MAP_NORMAL;           # Shader location: sampler2d texture: normal
    MAP_ROUGHNESS;        # Shader location: sampler2d texture: roughness
    MAP_OCCLUSION;        # Shader location: sampler2d texture: occlusion
    MAP_EMISSION;         # Shader location: sampler2d texture: emission
    MAP_HEIGHT;           # Shader location: sampler2d texture: height
    MAP_CUBEMAP;          # Shader location: samplerCube texture: cubemap
    MAP_IRRADIANCE;       # Shader location: samplerCube texture: irradiance
    MAP_PREFILTER;        # Shader location: samplerCube texture: prefilter
    MAP_BRDF;             # Shader location: sampler2d texture: brdf
}

#typeid rl.ShaderLocationIndex.DIFFUSE :: rl.ShaderLocationIndex.ALBEDO;
#typeid rl.ShaderLocationIndex.SPECULAR :: rl.ShaderLocationIndex.METALNESS;

enum rl.ShaderUniformDataType :: {
    FLOAT :: 0;
    VEC2;
    VEC3;
    VEC4;
    INT;
    IVEC2;
    IVEC3;
    IVEC4;
    SAMPLER2D;
}

enum rl.ShaderAttributeDataType :: {
    FLOAT :: 0;
    VEC2;
    VEC3;
    VEC4;
}


enum rl.PixelFormat :: {
    UNCOMPRESSED_GRAYSCALE :: 1; # 8 bit per pixel (no alpha)
    UNCOMPRESSED_GRAY_ALPHA;     # 8*2 bpp (2 channels)
    UNCOMPRESSED_R5G6B5;         # 16 bpp
    UNCOMPRESSED_R8G8B8;         # 24 bpp
    UNCOMPRESSED_R5G5B5A1;       # 16 bpp (1 bit alpha)
    UNCOMPRESSED_R4G4B4A4;       # 16 bpp (4 bit alpha)
    UNCOMPRESSED_R8G8B8A8;       # 32 bpp
    UNCOMPRESSED_R32;            # 32 bpp (1 channel - float)
    UNCOMPRESSED_R32G32B32;      # 32*3 bpp (3 channels - float)
    UNCOMPRESSED_R32G32B32A32;   # 32*4 bpp (4 channels - float)
    UNCOMPRESSED_R16;            # 16 bpp (1 channel - half float)
    UNCOMPRESSED_R16G16B16;      # 16*3 bpp (3 channels - half float)
    UNCOMPRESSED_R16G16B16A16;   # 16*4 bpp (4 channels - half float)
    COMPRESSED_DXT1_RGB;         # 4 bpp (no alpha)
    COMPRESSED_DXT1_RGBA;        # 4 bpp (1 bit alpha)
    COMPRESSED_DXT3_RGBA;        # 8 bpp
    COMPRESSED_DXT5_RGBA;        # 8 bpp
    COMPRESSED_ETC1_RGB;         # 4 bpp
    COMPRESSED_ETC2_RGB;         # 4 bpp
    COMPRESSED_ETC2_EAC_RGBA;    # 8 bpp
    COMPRESSED_PVRT_RGB;         # 4 bpp
    COMPRESSED_PVRT_RGBA;        # 4 bpp
    COMPRESSED_ASTC_4x4_RGBA;    # 8 bpp
    COMPRESSED_ASTC_8x8_RGBA;    # 2 bpp
}

enum rl.TextureFilter :: {
    POINT :: 0;
    BILINEAR;
    TRILINEAR;
    ANISOTROPIC_4X;
    ANISOTROPIC_8X;
    ANISOTROPIC_16X;
}

enum rl.TextureWrap :: {
    REPEAT :: 0;
    CLAMP;
    MIRROR_REPEAT;
    MIRROR_CLAMP;
}

enum rl.CubemapLayout :: {
    AUTO_DETECT :: 0;
    LINE_VERTICAL;
    LINE_HORIZTONAL;
    CROSS_THREE_BY_FOUR;
    CROSS_FOUR_BY_THREE;
    PANORAMA;
}

enum rl.FontType :: {
    DEFAULT :: 0;
    BITMAP;
    SDF;
}

enum rl.BlendMode :: {
    ALPHA :: 0;
    ADDITIVE;
    MULTIPLIED;
    ADD_COLORS;
    SUBTRACT_COLORS;
    ALPHA_REMULTIPLY;
    CUSTOM;
    CUSTOM_SEPARATE;
}

enum rl.Gesture :: {
    NONE :: 0;
    TAP :: 1;
    DOUBLETAP :: 2;
    HOLD :: 4;
    DRAG :: 8;
    SWIPE_RIGHT :: 16;
    SWIPE_LEFT :: 32;
    SWIPE_UP :: 64;
    SWIPE_DOWN :: 128;
    PINCH_IN :: 256;
    PINCH_OUT :: 512;
}

enum rl.CameraMode :: {
    CUSTOM :: 0;
    FREE;
    ORBITAL;
    FIRST_PERSON;
    THIRD_PERSON;
}

enum rl.CameraProjection :: {
    PERSPECTIVE :: 0;
    ORTHOGRAPHIC;
}

enum rl.NPatchLayout :: {
    NINE_PATCH :: 0;
    THREE_PATCH_VERTICAL;
    THREE_PATCH_HORIZONTAL;
}

#typedef void (*TraceLogCallback)(int logLevel, const char *text, va_list args);  // Logging: Redirect trace log messages
#typedef unsigned char *(*LoadFileDataCallback)(const char *fileName, int *dataSize);    // FileIO: Load binary data
#typedef bool (*SaveFileDataCallback)(const char *fileName, void *data, int dataSize);   // FileIO: Save binary data
#typedef char *(*LoadFileTextCallback)(const char *fileName);            // FileIO: Load text data
#typedef bool (*SaveFileTextCallback)(const char *fileName, char *text); // FileIO: Save text data

#------------------------------------------------------------------------------------
# Global Variables Definition
#------------------------------------------------------------------------------------
# It's lonely here...

#------------------------------------------------------------------------------------
# Window and Graphics Device Functions (Module: core)
#------------------------------------------------------------------------------------

# Window-related functions
@inline _ rl.InitWindow :: (int width int height ^char title) {@c [InitWindow(width, height, title);];}
@inline _ rl.CloseWindow :: () {@c [CloseWindow();];}
@inline bool rl.WindowShouldClose :: () {@c [return WindowShouldClose();];}
@inline bool rl.IsWindowReady :: () {@c [return IsWindowReady();];}
@inline bool rl.IsWindowFullscreen :: () {@c [return IsWindowFullscreen();];}
@inline bool rl.IsWindowHidden :: () {@c [return IsWindowHidden();];}
@inline bool rl.IsWindowMinimized :: () {@c [return IsWindowMinimized();];}
@inline bool rl.IsWindowMaximized :: () {@c [return IsWindowMaximized();];}
@inline bool rl.IsWindowFocused :: () {@c [return IsWindowFocused();];}
@inline bool rl.IsWindowResized :: () {@c [return IsWindowResized();];}
@inline bool rl.IsWindowState :: (uint flag) {@c [return IsWindowState(flag);];}
@inline _ rl.SetWindowState :: (uint flags) {@c [SetWindowState(flags);];}
@inline _ rl.ClearWindowState :: (uint flags) {@c [ClearWindowState(flags);];}
@inline _ rl.ToggleFullscreen :: () {@c [ToggleFullscreen();];}
@inline _ rl.ToggleBorderlessWindowed :: () {@c [ToggleBorderlessWindowed();];}
@inline _ rl.MaximizeWindow :: () {@c [MaximizeWindow();];}
@inline _ rl.MinimizeWindow :: () {@c [MinimizeWindow();];}
@inline _ rl.RestoreWindow :: () {@c [RestoreWindow();];}
@inline _ rl.SetWindowIcon :: (rl.Image image) {@c [SetWindowIcon(*(Image*)&image);];}
@inline _ rl.SetWindowIcons :: (^rl.Image images int count) {@c [SetWindowIcons(*(Image**)&images, count);];}
@inline _ rl.SetWindowTitle :: (^char title) {@c [SetWindowTitle(title);];}
@inline _ rl.SetWindowPosition :: (int x int y) {@c [SetWindowPosition(x, y);];}
@inline _ rl.SetWindowMonitor :: (int monitor) {@c [SetWindowMonitor(monitor);];}
@inline _ rl.SetWindowMinSize :: (int width int height) {@c [SetWindowMinSize(width, height);];}
@inline _ rl.SetWindowMaxSize :: (int width int height) {@c [SetWindowMaxSize(width, height);];}
@inline _ rl.SetWindowSize :: (int width int height) {@c [SetWindowSize(width, height);];}
@inline _ rl.SetWindowOpacity :: (f32 opacity) {@c [SetWindowOpacity(opacity);];}
@inline _ rl.SetWindowFocused :: () {@c [SetWindowFocused();];}
@inline ^_ rl.GetWindowHandle :: () {@c [return GetWindowHandle();];}
@inline int rl.GetScreenWidth :: () {@c [return GetScreenWidth();];}
@inline int rl.GetScreenHeight :: () {@c [return GetScreenHeight();];}
@inline int rl.GetRenderWidth :: () {@c [return GetRenderWidth();];}
@inline int rl.GetRenderHeight :: () {@c [return GetRenderHeight();];}
@inline int rl.GetMonitorCount :: () {@c [return GetMonitorCount();];}
@inline int rl.GetCurrentMonitor :: () {@c [return GetCurrentMonitor();];}
@inline rl.Vector2 rl.GetMonitorPosition :: (int monitor) {@c [Vector2 v = GetMonitorPosition(monitor); return *(Vector2f32*)&v;];}
@inline int rl.GetMonitorWidth :: (int monitor) {@c [return GetMonitorWidth(monitor);];}
@inline int rl.GetMonitorHeight :: (int monitor) {@c [return GetMonitorHeight(monitor);];}
@inline int rl.GetMonitorPhysicalWidth :: (int monitor) {@c [return GetMonitorPhysicalWidth(monitor);];}
@inline int rl.GetMonitorPhysicalHeight :: (int monitor) {@c [return GetMonitorPhysicalHeight(monitor);];}
@inline int rl.GetMonitorRefreshRate :: (int monitor) {@c [return GetMonitorRefreshRate(monitor);];}
@inline rl.Vector2 rl.GetWindowPosition :: () {@c [Vector2 v = GetWindowPosition(); return *(Vector2f32*)&v;];}
@inline rl.Vector2 rl.GetWindowScaleDPI :: () {@c [Vector2 v = GetWindowScaleDPI(); return *(Vector2f32*)&v;];}
@inline ^char rl.GetMonitorName :: (int monitor) {@c [return GetMonitorName(monitor);];}
@inline _ rl.SetClipboardText :: (^char text) {@c [SetClipboardText(text);];}
@inline ^char rl.GetClipboardText :: () {@c [return GetClipboardText();];}
@inline _ rl.EnableEventWaiting :: () {@c [EnableEventWaiting();];}
@inline _ rl.DisableEventWaiting :: () {@c [DisableEventWaiting();];}

# Cursor-related functions
@inline _ rl.ShowCursor :: () {@c [ShowCursor();];}
@inline _ rl.HideCursor :: () {@c [HideCursor();];}
@inline bool rl.IsCursorHidden :: () {@c [return IsCursorHidden();];}
@inline _ rl.EnableCursor :: () {@c [EnableCursor();];}
@inline _ rl.DisableCursor :: () {@c [DisableCursor();];}
@inline bool rl.IsCursorOnScreen :: () {@c [return IsCursorOnScreen();];}

# Drawing-related functions
@inline _ rl.ClearBackground :: (rl.Color color) {@c [ClearBackground(*(Color*)&color);];}
@inline _ rl.BeginDrawing :: () {@c [BeginDrawing();];}
@inline _ rl.EndDrawing :: () {@c [EndDrawing();];}
@inline _ rl.BeginMode2D :: (rl.Camera2D camera) {@c [BeginMode2D(*(Camera2D*)&camera);];}
@inline _ rl.EndMode2D :: () {@c [EndMode2D();];}
@inline _ rl.BeginMode3D :: (rl.Camera3D camera) {@c [BeginMode3D(*(Camera3D*)&camera);];}
@inline _ rl.EndMode3D :: () {@c [EndMode3D();];}
@inline _ rl.BeginTextureMode :: (rl.RenderTexture target) {@c [BeginTextureMode(*(RenderTexture*)&target);];}
@inline _ rl.EndTextureMode :: () {@c [EndTextureMode();];}
@inline _ rl.BeginShaderMode :: (rl.Shader shader) {@c [BeginShaderMode(*(Shader*)&shader);];}
@inline _ rl.EndShaderMode :: () {@c [EndShaderMode();];}
@inline _ rl.BeginBlendMode :: (int mode) {@c [BeginBlendMode(mode);];}
@inline _ rl.EndBlendMode :: () {@c [EndBlendMode();];}
@inline _ rl.BeginScissorMode :: (int x int y int width int height) {@c [BeginScissorMode(x, y, width, height);];}
@inline _ rl.EndScissorMode :: () {@c [EndScissorMode();];}
@inline _ rl.BeginVrStereoMode :: (rl.VrStereoConfig config) {@c [BeginVrStereoMode(*(VrStereoConfig*)&config);];}
@inline _ rl.EndVrStereoMode :: () {@c [EndVrStereoMode();];}

# VR stereo config functions for VR simulator
@inline rl.VrStereoConfig rl.LoadVrStereoConfig :: (rl.VrDeviceInfo device) {@c [VrStereoConfig v = LoadVrStereoConfig(*(VrDeviceInfo*)&device); return *(rl__VrStereoConfig*)&v;];}
@inline _ rl.UnloadVrStereoConfig :: (rl.VrStereoConfig config) {@c [UnloadVrStereoConfig(*(VrStereoConfig*)&config);];}

# Shader management functions
# NOTE: shader functionality is not available on OpenGL 1.1
@inline rl.Shader rl.LoadShader :: (^char vsFileName ^char fsFileName) {@c [Shader v = LoadShader(vsFileName, fsFileName); return *(rl__Shader*)&v;];}
@inline rl.Shader rl.LoadShaderFromMemory :: (^char vsCode ^char fsCode) {@c [Shader v = LoadShaderFromMemory(vsCode, fsCode); return *(rl__Shader*)&v;];}
@inline bool rl.IsShaderReady :: (rl.Shader shader) {@c [return IsShaderReady(*(Shader*)&shader);];}
@inline int rl.GetShaderLocation :: (rl.Shader shader ^char uniformName) {@c [return GetShaderLocation(*(Shader*)&shader, uniformName);];}
@inline int rl.GetShaderLocationAttrib :: (rl.Shader shader ^char attribName) {@c [return GetShaderLocationAttrib(*(Shader*)&shader, attribName);];}
@inline _ rl.SetShaderValue :: (rl.Shader shader int locIndex ^_ value int uniformType) {@c [SetShaderValue(*(Shader*)&shader, locIndex, value, uniformType);];}
@inline _ rl.SetShaderValueV :: (rl.Shader shader int locIndex ^_ value int uniformType int count) {@c [SetShaderValueV(*(Shader*)&shader, locIndex, value, uniformType, count);];}
@inline _ rl.SetShaderValueMatrix :: (rl.Shader shader int locIndex rl.Matrix mat) {@c [SetShaderValueMatrix(*(Shader*)&shader, locIndex, *(Matrix*)&mat);];}
@inline _ rl.SetShaderValueTexture :: (rl.Shader shader int locIndex rl.Texture2D texture) {@c [SetShaderValueTexture(*(Shader*)&shader, locIndex, *(Texture2D*)&texture);];}
@inline _ rl.UnloadShader :: (rl.Shader shader) {@c [UnloadShader(*(Shader*)&shader);];}

# Timing-related functions
@inline _ rl.SetTargetFPS :: (int fps) {@c [SetTargetFPS(fps);];}
@inline f32 rl.GetFrameTime :: () {@c [return GetFrameTime();];}
@inline f64 rl.GetTime :: () {@c [return GetTime();];}
@inline int rl.GetFPS :: () {@c [return GetFPS();];}

# Random values generation functions
@inline _ rl.SetRandomSeed :: (uint seed) {@c [SetRandomSeed(seed);];}
@inline int rl.GetRandomValue :: (int min int max) {@c [return GetRandomValue(min, max);];}
@inline ^int rl.LoadRandomSequence :: (uint count int min int max) {@c [return LoadRandomSequence(count, min, max);];}
@inline _ rl.UnloadRandomSequence :: (^int sequence) {@c [UnloadRandomSequence(sequence);];}

# Misc. functions
@inline _ rl.TakeScreenshot :: (^char fileName) {@c [TakeScreenshot(fileName);];}
@inline _ rl.SetConfigFlags :: (uint flags) {@c [SetConfigFlags(flags);];}
@inline _ rl.OpenURL :: (^char url) {@c [OpenURL(url);];}

# Note: Following functins implemented in module [utils]
# traceLog is not implemented as variadics don't exist in impulse 
@inline _ rl.SetTraceLogLevel :: (int logLevel) {@c [SetTraceLogLevel(logLevel);];}
@inline ^_ rl.MemAlloc :: (uint size) {@c [return MemAlloc(size);];}
@inline ^_ rl.MemRealloc :: (^_ ptr uint size) {@c [return MemRealloc(ptr, size);];}
@inline _ rl.MemFree :: (^_ ptr) {@c [MemFree(ptr);];}

# Files managament functions
@inline ^u8 rl.LoadFileData :: (^char fileName ^int dataSize) {@c [return LoadFileData(fileName, dataSize);];}
@inline _ rl.UnloadFileData :: (^u8 data) {@c [UnloadFileData(data);];}
@inline bool rl.SaveFileData :: (^char fileName ^_ data int dataSize) {@c [return SaveFileData(fileName, data, dataSize);];}
@inline bool rl.ExportDataAsCode :: (^u8 data int dataSize ^char fileName) {@c [return ExportDataAsCode(data, dataSize, fileName);];}
@inline ^char rl.LoadFileText :: (^char fileName) {@c [return LoadFileText(fileName);];}
@inline _ rl.UnloadFileText :: (^char text) {@c [UnloadFileText(text);];}
@inline bool rl.SaveFileText :: (^char fileName ^char text) {@c [return SaveFileText(fileName, text);];}

@inline bool rl.FileExists :: (^char fileName) {@c [return FileExists(fileName);];}
@inline bool rl.DirectoryExists :: (^char dirPath) {@c [return DirectoryExists(dirPath);];}
@inline bool rl.IsFileExtension :: (^char fileName ^char ext) {@c [return IsFileExtension(fileName, ext);];}
@inline int rl.GetFileLength :: (^char fileName) {@c [return GetFileLength(fileName);];}
@inline ^char rl.GetFileExtension :: (^char fileName) {@c [GetFileExtension(fileName);];}
@inline ^char rl.GetFileName :: (^char filePath) {@c [return GetFileName(filePath);];}
@inline ^char rl.GetFileNameWithoutExt :: (^char filePath) {@c [return GetFileNameWithoutExt(filePath);];}
@inline ^char rl.GetDirectoryPath :: (^char filePath) {@c [return GetDirectoryPath(filePath);];}
@inline ^char rl.GetPrevDirectoryPath :: (^char dirPath) {@c [return GetPrevDirectoryPath(dirPath);];}
@inline ^char rl.GetWorkingDirectory :: () {@c [return GetWorkingDirectory();];}
@inline ^char rl.GetApplicationDirectory :: () {@c [return GetApplicationDirectory();];}
@inline bool rl.ChangeDirectory :: (^char dir) {@c [return ChangeDirectory(dir);];}
@inline bool rl.IsPathFile :: (^char path) {@c [return IsPathFile(path);];}
@inline rl.FilePathList rl.LoadDirectoryFiles :: (^char dirPath) {@c [FilePathList v = LoadDirectoryFiles(dirPath); return *(rl__FilePathList*)&v;];}
@inline rl.FilePathList rl.LoadDirectoryFilesEx :: (^char basePath ^char filter bool scanSubdirs) {@c [FilePathList v = LoadDirectoryFilesEx(basePath, filter, scanSubdirs); return *(rl__FilePathList*)&v;];}
@inline _ rl.UnloadDirectoryFiles :: (rl.FilePathList files) {@c [UnloadDirectoryFiles(*(FilePathList*)&files);];}
@inline bool rl.IsFileDropped :: () {@c [return IsFileDropped();];}
@inline rl.FilePathList rl.LoadDroppedFiles :: () {@c [FilePathList v = LoadDroppedFiles(); return *(rl__FilePathList*)&v;];}
@inline _ rl.UnloadDroppedFiles :: (rl.FilePathList files) {@c [UnloadDroppedFiles(*(FilePathList*)&files);];}
@inline i64 rl.GetFileModTime :: (^char fileName) {@c [return GetFileModTime(fileName);];}

# Compression/Encoding functionality
@inline ^u8 rl.CompressData :: (^u8 data int dataSize ^int compDataSize) {@c [return CompressData(data, dataSize, compDataSize);];}
@inline ^u8 rl.DecompressData :: (^u8 compData int compDataSize ^int dataSize) {@c [return DecompressData(compData, compDataSize, dataSize);];}
@inline ^char rl.EncodeDataBase64 :: (^u8 data int dataSize ^int outputSize) {@c [return EncodeDataBase64(data, dataSize, outputSize);];}
@inline ^u8 rl.DecodeDataBase64 :: (^u8 data ^int outputSize) {@c [return DecodeDataBase64(data, outputSize);];}

# Automation events functionality
#@inline rl.AutomationEventList rl.LoadAutomationEventList :: (^char fileName) {@c [AutomationEventList v = LoadAutomationEventList(fileName); return *(AutomationEventList*)&v;];}
#@inline _ rl.UnloadAutomationEventList :: (rl.AutomationEventList *list) {@c [UnloadAutomationEventList(*(AutomationEventList*)&list);];}
#@inline bool rl.ExportAutomationEventList :: (rl.AutomationEventList list ^char fileName) {@c [return ExportAutomationEventList(*(AutomationEventList*)&list, fileName);];}
#@inline _ rl.SetAutomationEventList :: (rl.AutomationEventList *list) {@c [SetAutomationEventList(*(AutomationEventList*)&list);];}
#@inline _ rl.SetAutomationEventBaseFrame :: (int frame) {@c [SetAutomationEventBaseFrame(frame);];}
#@inline _ rl.StartAutomationEventRecording :: () {@c [StartAutomationEventRecording();];}
#@inline _ rl.StopAutomationEventRecording :: () {@c [StopAutomationEventRecording();];}
#@inline _ rl.PlayAutomationEvent :: (rl.AutomationEvent event) {@c [PlayAutomationEvent(*(AutomationEvent*)&event);];}

#------------------------------------------------------------------------------------
# Input Handling Functions (Module: core)
#------------------------------------------------------------------------------------

# Input-related functions: keyboard
@inline bool rl.IsKeyPressed :: (int key) {@c [return IsKeyPressed(key);];}
@inline bool rl.IsKeyPressedRepeat :: (int key) {@c [return IsKeyPressedRepeat(key);];}
@inline bool rl.IsKeyDown :: (int key) {@c [return IsKeyDown(key);];}
@inline bool rl.IsKeyReleased :: (int key) {@c [return IsKeyReleased(key);];}
@inline bool rl.IsKeyUp :: (int key) {@c [return IsKeyUp(key);];}
@inline int rl.GetKeyPressed :: () {@c [return GetKeyPressed();];}
@inline int rl.GetCharPressed :: () {@c [return GetCharPressed();];}
@inline _ rl.SetExitKey :: (int key) {@c [return SetExitKey(key);];}

# Input-related functions: gamepads
@inline bool rl.IsGamepadAvailable :: (int gamepad) {@c [return IsGamepadAvailable(gamepad);];}
@inline ^char rl.GetGamepadName :: (int gamepad) {@c [return GetGamepadName(gamepad);];}
@inline bool rl.IsGamepadButtonPressed :: (int gamepad int button) {@c [return IsGamepadButtonPressed(gamepad, button);];}
@inline bool rl.IsGamepadButtonDown :: (int gamepad int button) {@c [return IsGamepadButtonDown(gamepad, button);];}
@inline bool rl.IsGamepadButtonReleased :: (int gamepad int button) {@c [return IsGamepadButtonReleased(gamepad, button);];}
@inline bool rl.IsGamepadButtonUp :: (int gamepad int button) {@c [return IsGamepadButtonUp(gamepad, button);];}
@inline int rl.GetGamepadButtonPressed :: () {@c [return GetGamepadButtonPressed();];}
@inline int rl.GetGamepadAxisCount :: (int gamepad) {@c [return GetGamepadAxisCount(gamepad);];}
@inline f32 rl.GetGamepadAxisMovement :: (int gamepad int axis) {@c [return GetGamepadAxisMovement(gamepad, axis);];}
@inline int rl.SetGamepadMappings :: (^char mappings) {@c [return SetGamepadMappings(mappings);];} # Set interal gamepad mappings (SDL_GameControllerDB)

# Input-related functions: mouse
@inline bool rl.IsMouseButtonPressed :: (int button) {@c [return IsMouseButtonPressed(button);];} # Check if a mouse button has been pressed once
@inline bool rl.IsMouseButtonDown :: (int button) {@c [return IsMouseButtonDown(button);];}
@inline bool rl.IsMouseButtonReleased :: (int button) {@c [return IsMouseButtonReleased(button);];}
@inline bool rl.IsMouseButtonUp :: (int button) {@c [return IsMouseButtonUp(button);];} # Check if a mouse button is NOT being pressed
@inline int rl.GetMouseX :: () {@c [return GetMouseX();];}
@inline int rl.GetMouseY :: () {@c [return GetMouseY();];}
@inline rl.Vector2 rl.GetMousePosition :: () {@c [Vector2 v = GetMousePosition(); return *(rl__Vector2*)&v;];}
@inline rl.Vector2 rl.GetMouseDelta :: () {@c [Vector2 v = GetMouseDelta(); return *(rl__Vector2*)&v;];}
@inline _ rl.SetMousePosition :: (int x int y) {@c [SetMousePosition(x, y);];}
@inline _ rl.SetMouseOffset :: (int offsetX int offsetY) {@c [SetMouseOffset(offsetX, offsetY);];}
@inline _ rl.SetMouseScale :: (f32 scaleX f32 scaleY) {@c [SetMouseScale(scaleX, scaleY);];}
@inline f32 rl.GetMouseWheelMove :: () {@c [return GetMouseWheelMove();];}
@inline rl.Vector2 rl.GetMouseWheelMoveV :: () {@c [Vector2 v = GetMouseWheelMoveV(); return *(rl__Vector2*)&v;];}
@inline _ rl.SetMouseCursor :: (int cursor) {@c [SetMouseCursor(cursor);];}

# Input-related functions: touch
@inline int rl.GetTouchX :: () {@c [return GetTouchX();];}
@inline int rl.GetTouchY :: () {@c [return GetTouchY();];}
@inline rl.Vector2 rl.GetTouchPosition :: (int index) {@c [Vector2 v = GetTouchPosition(index); return *(rl__Vector2*)&v;];}
@inline int rl.GetTouchPointId :: (int index) {@c [return GetTouchPointId(index);];}
@inline int rl.GetTouchPointCount :: () {@c [return GetTouchPointCount();];}

#------------------------------------------------------------------------------------
# Gestures and Touch Handling Functions (Module: rgestures)
#------------------------------------------------------------------------------------
@inline _ rl.SetGesturesEnabled :: (uint flags) {@c [SetGesturesEnabled(flags);];}
@inline bool rl.IsGestureDetected :: (uint gesture) {@c [return IsGestureDetected(gesture);];}
@inline int rl.GetGestureDetected :: () {@c [return GetGestureDetected();];} # Get latest detected gesture
@inline f32 rl.GetGestureHoldDuration :: () {@c [return GetGestureHoldDuration();];} # Get gesture hold time in milliseconds
@inline rl.Vector2 rl.GetGestureDragVector :: () {@c [Vector2 v = GetGestureDragVector(); return *(rl__Vector2*)&v;];}
@inline rl.Vector2 rl.GetGesturePinchVector :: () {@c [Vector2 v = GetGesturePinchVector(); return *(rl__Vector2*)&v;];}
@inline f32 rl.GetGesturePinchAngle :: () {@c [return GetGesturePinchAngle();];}

#------------------------------------------------------------------------------------
# Camera System Functions (Module: rcamera)
#------------------------------------------------------------------------------------
@inline _ rl.UpdateCamera :: (^rl.Camera camera int mode) {@c [UpdateCamera(*(Camera**)&camera, mode);];}
@inline _ rl.UpdateCameraPro :: (^rl.Camera camera rl.Vector3 movement rl.Vector3 rotation f32 zoom) {@c [UpdateCameraPro(*(Camera**)&camera, *(Vector3*)&movement, *(Vector3*)&rotation, zoom);];}

#------------------------------------------------------------------------------------
# Basic Shapes Drawing Functions (Module: shapes)
#------------------------------------------------------------------------------------
# Set texture and rectangle to be used on shapes drawing
# NOTE: It can be useful when using basic shapes and one single font,
# defining a font char white rectangle would allow drawing everything in a single draw call
@inline _ rl.SetShapesTexture :: (rl.Texture2D texture rl.Rectangle source) {@c [SetShapesTexture(*(Texture2D*)&texture, *(Rectangle*)&source);];} # Set texture and rectangle to be used on shapes drawing

# Basic shapes drawing functions
@inline _ rl.DrawPixel :: (int posX int posY rl.Color color) {@c [DrawPixel(posX, posY, *(Color*)&color);];}
@inline _ rl.DrawPixelV :: (rl.Vector2 position rl.Color color) {@c [DrawPixelV(*(Vector2*)&position, *(Color*)&color);];}
@inline _ rl.DrawLine :: (int startPosX int startPosY int endPosX int endPosY rl.Color color) {@c [DrawLine(startPosX, startPosY, endPosX, endPosY, *(Color*)&color);];}
@inline _ rl.DrawLineV :: (rl.Vector2 startPos rl.Vector2 endPos rl.Color color) {@c [DrawLineV(*(Vector2*)&startPos, *(Vector2*)&endPos, *(Color*)&color);];}
@inline _ rl.DrawLineEx :: (rl.Vector2 startPos rl.Vector2 endPos f32 thick rl.Color color) {@c [DrawLineEx(*(Vector2*)&startPos, *(Vector2*)&endPos, thick, *(Color*)&color);];}
@inline _ rl.DrawLineStrip :: (^rl.Vector2 points int pointCount rl.Color color) {@c [DrawLineStrip(*(Vector2**)&points, pointCount, *(Color*)&color);];}
@inline _ rl.DrawLineBezier :: (rl.Vector2 startPos rl.Vector2 endPos f32 thick rl.Color color) {@c [DrawLineBezier(*(Vector2*)&startPos, *(Vector2*)&endPos, thick, *(Color*)&color);];}
@inline _ rl.DrawCircle :: (int centerX int centerY f32 radius rl.Color color) {@c [DrawCircle(centerX, centerY, radius, *(Color*)&color);];} #RLAPI void DrawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);      // Draw a piece of a circle
@inline _ rl.DrawCircleSector :: (rl.Vector2 center f32 radius f32 startAngle f32 endAngle int segments rl.Color color) {@c [DrawCircleSector(*(Vector2*)&center, radius, startAngle, endAngle, segments, *(Color*)&color);];}
@inline _ rl.DrawCircleSectorLines :: (rl.Vector2 center f32 radius f32 startAngle f32 endAngle int segments rl.Color color) {@c [DrawCircleSectorLines(*(Vector2*)&center, radius, startAngle, endAngle, segments, *(Color*)&color);];}
@inline _ rl.DrawCircleGradient :: (int centerX int centerY f32 radius rl.Color color1 rl.Color color2) {@c [DrawCircleGradient(centerX, centerY, radius, *(Color*)&color1, *(Color*)&color2);];}
@inline _ rl.DrawCircleV :: (rl.Vector2 center f32 radius rl.Color color) {@c [DrawCircleV(*(Vector2*)&center, radius, *(Color*)&color);];}
@inline _ rl.DrawCircleLines :: (int centerX int centerY f32 radius rl.Color color) {@c [DrawCircleLines(centerX, centerY, radius, *(Color*)&color);];}
@inline _ rl.DrawCircleLinesV :: (rl.Vector2 center f32 radius rl.Color color) {@c [DrawCircleLinesV(*(Vector2*)&center, radius, color);];}
@inline _ rl.DrawEllipse :: (int centerX int centerY f32 radiusH f32 radiusV rl.Color color) {@c [DrawEllipse(centerX, centerY, radiusH, radiusV, *(Color*)&color);];}
@inline _ rl.DrawEllipseLines :: (int centerX int centerY f32 radiusH f32 radiusV rl.Color color) {@c [DrawEllipseLines(centerX, centerY, radiusH, radiusV, *(Color*)&color);];}
#RLAPI void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color); // Draw ring
#RLAPI void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);    // Draw ring outline
@inline _ rl.DrawRectangle :: (int posX int posY int width int height rl.Color color) {@c [DrawRectangle(posX, posY, width, height, *(Color*)&color);];}
@inline _ rl.DrawRectangleV :: (rl.Vector2 position rl.Vector2 size rl.Color color) {@c [DrawRectangleV(*(Vector2*)&position, *(Vector2*)&size, *(Color*)&color);];}
@inline _ rl.DrawRectangleRec :: (rl.Rectangle rec rl.Color color) {@c [DrawRectangleRec(*(Rectangle*)&rec, *(Color*)&color);];}
#RLAPI void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);                 // Draw a color-filled rectangle with pro parameters
#RLAPI void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);// Draw a vertical-gradient-filled rectangle
#RLAPI void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2);// Draw a horizontal-gradient-filled rectangle
#RLAPI void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);       // Draw a gradient-filled rectangle with custom vertex colors
@inline _ rl.DrawRectangleLines :: (int posX int posY int width int height rl.Color color) {@c [DrawRectangleLines(posX, posY, width, height, *(Color*)&color);];}
#RLAPI void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color);                            // Draw rectangle outline with extended parameters
#RLAPI void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);              // Draw rectangle with rounded edges
#RLAPI void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, float lineThick, Color color); // Draw rectangle with rounded edges outline
@inline _ rl.DrawTriangle :: (rl.Vector2 v1 rl.Vector2 v2 rl.Vector2 v3 rl.Color color) {@c [DrawTriangle(*(Vector2*)&v1, *(Vector2*)&v2, *(Vector2*)&v3, *(Color*)&color);];}
@inline _ rl.DrawTriangleLines :: (rl.Vector2 v1 rl.Vector2 v2 rl.Vector2 v3 rl.Color color) {@c [DrawTriangleLines(*(Vector2*)&v1, *(Vector2*)&v2, *(Vector2*)&v3, *(Color*)&color);];}
@inline _ rl.DrawTriangleFan :: (^rl.Vector2 points int pointCount rl.Color color) {@c [DrawTriangleFan(*(Vector2**)&points, pointCount, *(Color*)&color);];} # Draw a triangle fan defined by points (first vertex is the center)
#RLAPI void DrawTriangleStrip(Vector2 *points, int pointCount, Color color);                              // Draw a triangle strip defined by points
#RLAPI void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);               // Draw a regular polygon (Vector version)
#RLAPI void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);          // Draw a polygon outline of n sides
#RLAPI void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color); // Draw a polygon outline of n sides with extended parameters
