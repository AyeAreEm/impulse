@import "math.h";
@import "base/string.imp";

f64 pi :: 3.14159265358979323846;

@inline f32 sine_f32 :: (f32 x) { @c [return sinf(x);]; }
@inline f64 sine_f64 :: (f64 x) { @c [return sin(x);]; }

$T sine :: (typeid T $T x) {
    $T result;
    ^char type: type_to_cstr(T);
    ^char f32_str: type_to_cstr(f32);
    ^char f64_str: type_to_cstr(f64);
    if (cstr.compare(type f32_str)) {
        result: sine_f32(x);
    } orif (cstr.compare(type f64_str)) {
        result: sine_f64(x);
    } else {
        println("type %s can't be used in sine function as it's not a decimal" type_to_cstr(T));
        @c [exit(1);];
    }
    return result;
}

@inline f32 cosine_f32 :: (f32 x) { @c [return cosf(x);]; }
@inline f64 cosine_f64 :: (f64 x) { @c [return cos(x);]; }

$T cosine :: (typeid T $T x) {
    $T result;
    ^char type: type_to_cstr(T);
    ^char f32_str: type_to_cstr(f32);
    ^char f64_str: type_to_cstr(f64);
    if (cstr.compare(type f32_str)) {
        result: cosine_f32(x);
    } orif (cstr.compare(type f64_str)) {
        result: cosine_f64(x);
    } else {
        println("type %s can't be used in cosine function as it's not a decimal" type_to_cstr(T));
        @c [exit(1);];
    }
    return result;
}

@inline f32 sqrt_f32 :: (f32 x) { @c [return sqrtf(x);]; }
@inline f64 sqrt_f64 :: (f64 x) { @c [return sqrt(x);]; }

$T square_rt :: (typeid T $T x) {
    $T result;
    ^char type: type_to_cstr(T);
    ^char f32_str: type_to_cstr(f32);
    ^char f64_str: type_to_cstr(f64);
    if (cstr.compare(type f32_str)) {
        result: sqrt_f32(x);
    } orif (cstr.compare(type f64_str)) {
        result: sqrt_f64(x);
    } else {
        println("type %s can't be used in square_rt function as it's not a decimal" type_to_cstr(T));
        @c [exit(1);];
    }
    return result;
}

@inline f32 power_f32 :: (f32 x f32 y) { @c [return powf(x, y);]; }
@inline f64 power_f64 :: (f64 x f64 y) { @c [return pow(x, y);]; }

$T power :: (typeid T $T x $T y) {
    $T result;
    ^char type: type_to_cstr(T);
    ^char f32_str: type_to_cstr(f32);
    ^char f64_str: type_to_cstr(f64);
    if (cstr.compare(type f32_str)) {
        result: power_f32(x y);
    } orif (cstr.compare(type f64_str)) {
        result: power_f64(x y);
    } else {
        println("type %s can't be used in power function as it's not a decimal" type_to_cstr(T));
        @c [exit(1);];
    }
    return result;
}

struct Vector2f32 :: {
    f32 x;
    f32 y;

    @inline Vector2f32 new :: (f32 x f32 y) {
        Vector2f32 new;
        new.x: x;
        new.y: y;
        return new;
    }

    @inline Vector2f32 add :: (Vector2f32 a Vector2f32 b) {
        Vector2f32 c;
        c.x: [a.x + b.x];
        c.y: [a.y + b.y];
        return c;
    }

    @inline Vector2f32 sub :: (Vector2f32 a Vector2f32 b) {
        Vector2f32 c;
        c.x: [a.x - b.x];
        c.y: [a.y - b.y];
        return c;
    }

    @inline Vector2f32 mul :: (Vector2f32 a Vector2f32 b) {
        Vector2f32 c;
        c.x: [a.x * b.x];
        c.y: [a.y * b.y];
        return c;
    }

    @inline Vector2f32 div :: (Vector2f32 a Vector2f32 b) {
        Vector2f32 c;
        c.x: [a.x / b.x];
        c.y: [a.y / b.y];
        return c;
    }

    @inline Vector2f32 normalise :: (Vector2f32 vec) {
        f32 mag: square_rt(f32 [vec.x * vec.x + vec.y * vec.y]);
        if (mag > 0) {
            Vector2f32 normalised;
            normalised.x: [vec.x / mag];
            normalised.y: [vec.y / mag];
            return normalised;
        }

        return vec;
    }
}

struct Vector3f32 :: {
    f32 x;
    f32 y;
    f32 z;

    @inline Vector3f32 add :: (Vector3f32 a Vector3f32 b) {
        Vector3f32 c;
        c.x: [a.x + b.x];
        c.y: [a.y + b.y];
        c.z: [a.z + b.z];
        return c;
    }

    @inline Vector3f32 sub :: (Vector3f32 a Vector3f32 b) {
        Vector3f32 c;
        c.x: [a.x - b.x];
        c.y: [a.y - b.y];
        c.z: [a.z - b.z];
        return c;
    }

    @inline Vector3f32 mul :: (Vector3f32 a Vector3f32 b) {
        Vector3f32 c;
        c.x: [a.x * b.x];
        c.y: [a.y * b.y];
        c.z: [a.z * b.z];
        return c;
    }

    @inline Vector3f32 div :: (Vector3f32 a Vector3f32 b) {
        Vector3f32 c;
        c.x: [a.x / b.x];
        c.y: [a.y / b.y];
        c.z: [a.z / b.z];
        return c;
    }
}

struct Vector4f32 :: {
    f32 x;
    f32 y;
    f32 z;
    f32 w;

    @inline Vector4f32 add :: (Vector4f32 a Vector4f32 b) {
        Vector4f32 c;
        c.x: [a.x + b.x];
        c.y: [a.y + b.y];
        c.z: [a.z + b.z];
        c.w: [a.w + b.w];
        return c;
    }

    @inline Vector4f32 sub :: (Vector4f32 a Vector4f32 b) {
        Vector4f32 c;
        c.x: [a.x - b.x];
        c.y: [a.y - b.y];
        c.z: [a.z - b.z];
        c.w: [a.w - b.w];
        return c;
    }

    @inline Vector4f32 mul :: (Vector4f32 a Vector4f32 b) {
        Vector4f32 c;
        c.x: [a.x * b.x];
        c.y: [a.y * b.y];
        c.z: [a.z * b.z];
        c.w: [a.w * b.w];
        return c;
    }

    @inline Vector4f32 div :: (Vector4f32 a Vector4f32 b) {
        Vector4f32 c;
        c.x: [a.x / b.x];
        c.y: [a.y / b.y];
        c.z: [a.z / b.z];
        c.w: [a.w / b.w];
        return c;
    }
}

typeid Quaternionf32 :: Vector4f32;

struct Matrix4x4f32 :: {
    f32 m0; f32 m4; f32 m8; f32 m12;
    f32 m1; f32 m5; f32 m9; f32 m13;
    f32 m2; f32 m6; f32 m10; f32 m14;
    f32 m3; f32 m7; f32 m11; f32 m15;
}

struct Vector2f64 :: {
    f64 x;
    f64 y;

    @inline Vector2f64 add :: (Vector2f64 a Vector2f64 b) {
        Vector2f64 c;
        c.x: [a.x + b.x];
        c.y: [a.y + b.y];
        return c;
    }

    @inline Vector2f64 sub :: (Vector2f64 a Vector2f64 b) {
        Vector2f64 c;
        c.x: [a.x - b.x];
        c.y: [a.y - b.y];
        return c;
    }

    @inline Vector2f64 mul :: (Vector2f64 a Vector2f64 b) {
        Vector2f64 c;
        c.x: [a.x * b.x];
        c.y: [a.y * b.y];
        return c;
    }

    @inline Vector2f64 div :: (Vector2f64 a Vector2f64 b) {
        Vector2f64 c;
        c.x: [a.x / b.x];
        c.y: [a.y / b.y];
        return c;
    }
}

struct Vector3f64 :: {
    f64 x;
    f64 y;
    f64 z;

    @inline Vector3f64 add :: (Vector3f64 a Vector3f64 b) {
        Vector3f64 c;
        c.x: [a.x + b.x];
        c.y: [a.y + b.y];
        c.z: [a.z + b.z];
        return c;
    }

    @inline Vector3f64 sub :: (Vector3f64 a Vector3f64 b) {
        Vector3f64 c;
        c.x: [a.x - b.x];
        c.y: [a.y - b.y];
        c.z: [a.z - b.z];
        return c;
    }

    @inline Vector3f64 mul :: (Vector3f64 a Vector3f64 b) {
        Vector3f64 c;
        c.x: [a.x * b.x];
        c.y: [a.y * b.y];
        c.z: [a.z * b.z];
        return c;
    }

    @inline Vector3f64 div :: (Vector3f64 a Vector3f64 b) {
        Vector3f64 c;
        c.x: [a.x / b.x];
        c.y: [a.y / b.y];
        c.z: [a.z / b.z];
        return c;
    }
}

struct Vector4f64 :: {
    f64 x;
    f64 y;
    f64 z;
    f64 w;

    @inline Vector4f64 add :: (Vector4f64 a Vector4f64 b) {
        Vector4f64 c;
        c.x: [a.x + b.x];
        c.y: [a.y + b.y];
        c.z: [a.z + b.z];
        c.w: [a.w + b.w];
        return c;
    }

    @inline Vector4f64 sub :: (Vector4f64 a Vector4f64 b) {
        Vector4f64 c;
        c.x: [a.x - b.x];
        c.y: [a.y - b.y];
        c.z: [a.z - b.z];
        c.w: [a.w - b.w];
        return c;
    }

    @inline Vector4f64 mul :: (Vector4f64 a Vector4f64 b) {
        Vector4f64 c;
        c.x: [a.x * b.x];
        c.y: [a.y * b.y];
        c.z: [a.z * b.z];
        c.w: [a.w * b.w];
        return c;
    }

    @inline Vector4f64 div :: (Vector4f64 a Vector4f64 b) {
        Vector4f64 c;
        c.x: [a.x / b.x];
        c.y: [a.y / b.y];
        c.z: [a.z / b.z];
        c.w: [a.w / b.w];
        return c;
    }
}

typeid Quaternionf64 :: Vector4f64;

struct Matrix4x4f64 :: {
    f64 m0; f64 m4; f64 m8; f64 m12;
    f64 m1; f64 m5; f64 m9; f64 m13;
    f64 m2; f64 m6; f64 m10; f64 m14;
    f64 m3; f64 m7; f64 m11; f64 m15;
}

@inline $T ease.linear_none :: (typeid T $T t $T b $T c $T d) { return [c*t/d + b]; }
@inline $T ease.linear_in :: (typeid T $T t $T b $T c $T d) { return [c*t/d + b]; }
@inline $T ease.linear_out :: (typeid T $T t $T b $T c $T d) { return [c*t/d + b]; }
@inline $T ease.linear_in_out :: (typeid T $T t $T b $T c $T d) { return [c*t/d + b]; }

@inline $T ease.sine_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.sine_in function" type); @c [exit(1);];}

    $T inner: [t/d * [pi/2.0]];
    $T outer: cosine(T inner);
    return [-c * outer + c + b];
}
@inline $T ease.sine_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.sine_out function" type); @c [exit(1);];}

    $T inner: [t/d*[pi/2.0]];
    $T outer: sine(f32 inner);
    return [c * outer + b];
}
@inline $T ease.sine_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.sine_in_out function" type); @c [exit(1);];}

    $T inner: [pi * t / d];
    $T outer: cosine(f32 inner);
    return [-c/2.0 * [outer - 1.0] + b];
}

@inline $T ease.circ_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.circ_in function" type); @c [exit(1);];}

    $T tt: [t / d];
    f32 inner: [square_rt(f32 [1.0 - tt*tt]) - 1.0];
    return [-c*inner + b];
}
@inline $T ease.circ_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.circ_out function" type); @c [exit(1);];}

    $T tt: [t / d - 1.0];
    f32 inner: [1.0 - tt*tt];
    f32 outer: square_rt(f32 inner);
    return [c * outer + b];
}
@inline $T ease.circ_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.circ_in_out function" type); @c [exit(1);];}

    $T result;
    $T tt: [t / d / 2.0];
    if (tt < 1.0) {
        f32 inner: [1.0 - tt*tt];
        f32 outer: square_rt(f32 inner);
        result: [-c/2.0 * [outer - 1.0] + b];
    } else {
        tt: [tt - 2.0];
        f32 inner: [1.0 - tt*tt];
        f32 outer: square_rt(f32 inner);
        result: [-c/2.0 * [outer - 1.0] + b];
    }

    return result;
}

@inline $T ease.cubic_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.cubic_in function" type); @c [exit(1);];}

    $T tt: [t / d];
    return [c*tt*tt*tt + b];
}
@inline $T ease.cubic_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.cubic_out function" type); @c [exit(1);];}

    $T tt: [t/d - 1.0];
    return [c*[tt*tt*tt + 1.0] + b];

}
@inline $T ease.cubic_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.cubic_in_out function" type); @c [exit(1);];}

    $T result;
    $T tt: [t / d / 2.0];
    if (t < 1.0) {
        result: [c/2.0 * tt*tt*tt + b];
    } else {
        tt: [tt - 2.0];
        result: [c/2.0 * tt*tt*tt + b];
    }

    return result;
}

# Quadratic Easing functions
@inline $T ease.quad_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.quad_in function" type); @c [exit(1);];}

    $T tt: [t / d];
    return [c*tt*tt + b];
}
@inline $T ease.quad_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.quad_out function" type); @c [exit(1);];}
    
    $T tt: [t / d];
    return [-c*tt*[tt - 2.0] + b];
}
@inline $T ease.quad_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.quad_in_out function" type); @c [exit(1);];}

    $T result;
    $T tt: [t / d / 2.0];
    if (tt < 1) {
        result: [[c/2] * [tt*tt] + b];
    } else {
        result: [-c/2.0*[[[tt - 1.0]*[tt - 3.0]] - 1.0] + b];
    }
    return result;
}

# Exponential Easing functions
@inline $T ease.expo_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.expo_in function" type); @c [exit(1);];}

    $T result;
    if (t = 0.0) {
        result: b;
    } else {
        $T inner: [10.0*[t/d - 1.0]];
        $T outer: power(T 2.0 inner);
        result: [c * outer + b];
    }
    return result;
}
@inline $T ease.expo_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.expo_out function" type); @c [exit(1);];}

    $T result;
    if (t = d) {
        result: [b + c];
    } else {
        $T inner: [-10.0*t / d];
        $T outer: [-power(T 2.0 inner)];
        result: [c * [outer + 1.0] + b];
    }
    return result;
}
@inline $T ease.expo_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.expo_in_out function" type); @c [exit(1);];}
    
    $T result;
    if (t = 0.0) {
        result: b;
    } orif (t = d) {
        result: [b + c];
    } else {
        $T tt: [t / d / 2.0];
        if (t < 1.0) {
            $T inner: [10.0 * [tt - 1.0]];
            $T outer: power(T 2.0 inner);
            result: [c/2.0*outer+b];
        } else {
            $T inner: [10.0 * [tt - 1.0]];
            $T outer: power(T 2.0 inner);
            result: [c/2.0*[-outer + 2.0] + b];
        }
    }

    return result;
}

# Back Easing functions
@inline $T ease.back_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.back_in function" type); @c [exit(1);];}

    $T s :: 1.90158;
    $T tt: [t / d];
    $T postFix: tt;
    return [c*[postFix]*tt*[[s + 1.0]*tt - s] + b];
}
@inline $T ease.back_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.back_out function" type); @c [exit(1);];}
    
    $T s :: 1.70158;
    $T tt: [t/d - 1.0];
    return [c*[tt*tt*[[s+1.0]*tt + s] + 1.0] + b];
}
@inline $T ease.back_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.back_in_out function" type); @c [exit(1);];}

    $T result;
    $T s: 1.70158;
    $T tt: [t / d / 2];
    if (tt < 1.0) {
        s: [s * 1.525];
        result: [c/2.0*[tt*tt*[[s + 1.0]*tt - s]] + b];
    } else {
        tt: [tt - 2];
        $T postFix: tt;
        s: [s * 1.525];
        result: [c/2.0*[[postFix]*tt*[[s+1.0]*tt + s] + 2.0] + b];
    }

    return result;
}

# Bounce Easing functions
@inline $T ease.bounce_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.bounce_out function" type); @c [exit(1);];}

    $T result;
    $T tt: [t / d];
    if (t < [1.0/2.75]) {
        result: [c*[7.5625*tt*tt] + b];
    } orif (t < [2.0/2.75]) {
        tt: [tt - 1.5/2.75];
        $T postFix: tt;
        result: [c*[7.5625*[postFix]*tt + 0.75] + b];
    } orif (t < [2.5/2.75]) {
        tt: [tt - 2.25/2.75];
        $T postFix: tt;
        result: [c*[7.5625*[postFix]*tt + 0.9375] + b];
    } else {
        tt: [tt - 2.625/2.75];
        $T postFix: tt;
        result: [c*[7.5625*[postFix]*tt + 0.984375] + b];
    }
    return result;
}
@inline $T ease.bounce_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.bounce_in function" type); @c [exit(1);];}

    $T inner: [d - t];
    $T outer: ease.bounce_out(inner 0.0 c d);
    return [c - outer + b];
}
@inline $T ease.bounce_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.bounce_in_out function" type); @c [exit(1);];}

    $T result;
    if (t < [d/2.0]) {
        $T inner: [t * 2.0];
        $T outer: ease.bounce_in(T inner 0.0 c d);
        result: [outer * 0.5 + b];
    } else {
        $T inner: [t * 2.0 - d];
        $T outer: ease.bounce_out(T inner 0.0 c d);
        result: [outer * 0.5 + c*0.5 + b];
    }
    return result;
}

# Elastic Easing functions
@inline $T ease.elastic_in :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.elastic_in function" type); @c [exit(1);];}

    $T result;
    if (t = 0.0) {
        result: b;
    } else {
        $T tt: [t / d];
        if (tt = 1.0) {
            result: [b + c];
        } else {
            $T p: [d*0.3];
            $T a: [c];
            $T s: [p/4.0];
            tt: [tt - 1];

            $T postFix_inner: power(f32 2.0 [10.0*tt]);
            $T postFix: [a*postFix_inner];

            $T inner: [[tt*d-s]*[2.0*pi]/p];
            $T outer: sine(T inner);
            result: [-[postFix*outer] + b];
        }
    }
    return result;
}
@inline $T ease.elastice_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.elastic_out function" type); @c [exit(1);];}
    
    $T result;
    if (t = 0.0) {
        result: b;
    } else {
        $T tt: [t / d];
        if (tt = 1.0) {
            result: [b + c];
        } else {
            $T p: [d*0.3];
            $T a: c;
            $T s: [p/4.0];
            $T powered: power(T 2.0 [-10.0 * tt]);
            $T sined: sine(T [[tt*d-s]*[2.0*pi]/p]);
            result: [a*powered*sined+c+b];
        }
    }
    return result;
}
@inline $T ease.elastic_in_out :: (typeid T $T t $T b $T c $T d) {
    ^char type: type_to_cstr(T);
    if (!cstr.compare(type "f32") and !cstr.compare(type "f64")) {println("type %s can't be used in ease.elastic_out function" type); @c [exit(1);];}

    $T result;
    if (t = 0.0) {
        result: b;
    } else {
        $T tt: [t / d / 2.0];
        if (tt = 2.0) {
            result: [b + c];
        } else {
            $T p: [d*[0.3*1.5]];
            $T a: c;
            $T s: [p/4.0];
            tt: [tt - 1];

            if (tt < 1.0) {
                $T postFix_powered: power(T 2.0 [10.0*tt]);
                $T postFix: [a*postFix_powered];
                $T sined: sine(T [[tt*d-s]*[2.0*pi]/p]);
                result: [-0.5*[postFix*sined] + b];
            } else {
                $T postFix_powered: power(T 2.0 [-10.0*tt]);
                $T postFix: [a*postFix_powered];
                $T sined: sine(T [[tt*d-s]*[2.0*pi]/p]);
                result: [postFix*sined*0.5 + c + b];
            }
        }
    }
    return result;
}
