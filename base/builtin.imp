@import "ctype.h";
@import "stdio.h";
@import "stdlib.h";
@import "string.h";
@import "stdarg.h";

#@c [
#ifdef _WIN64
#    bool win64 = true;
#    bool win32 = false;
#    bool linux = false;
#elif _WIN32
#    bool win64 = false;
#    bool win32 = true;
#    bool linux = false;
#elif __linux__
#    bool win64 = false;
#    bool win32 = false;
#    bool linux = true;
#endif
#];

@inline _ exitcode :: (int code) {
    @c [exit(code);];
}

struct[T] option :: {
    $T value;
    bool none;

    option[T] unwrap :: (typeid T option[T] opt) {
        if (opt.none) {
            @c [fprintf(stderr, "error: failed to unwrap in %s:%d\n", __FILE__, __LINE__);];
            @c [fprintf(stderr, "error: please take a look at the c file for more info\n");];
            exitcode(1);
        }
        return opt.value;
    }
}

struct[T] array :: {
    ^$T data;
    usize len;
}

@inline usize c.strlen :: (^char str) {
    @c [return strlen(str);];
}

# NOTE: this is an actually boolean unlike how c strcmp returns 0
@inline bool c.strcmp :: (^char str1 ^char str2) {
    @c [return !strcmp(str1, str2);];
}

# String type with length that isn't memory allocated
struct str :: {
    ^char data;
    usize len;

    str from :: (^char word) {
        str value;
        value.data: word;
        value.len: c.strlen(word);
        return value;
    }

    bool compare :: (str first str second) {
        if (first.len != second.len) {
            return false;
        }

        for (first) [ch i] {
            if (ch = second.data[i]) {
                return false;
            }
        }

        return true;
    }

    option[char] at :: (str word usize index) {
        option[char] ret;
        
        if (index >= word.len) {
            ret.none: true;
            return ret;
        }

        ret.value: word.data[index];
        return ret;
    }

    bool starts_with :: (str word char ch) {
        option[char] first_letter_op: str.at(word 0);
        if (first_letter_op.none) {
            return false;
        }
        if (first_letter_op.value != ch) {
            return false;
        }

        return true;
    }

    bool ends_with :: (str word char ch) {
        option[char] last_letter_op: str.at(word [word.len - 1]);
        if (last_letter_op.none) {
            return false;
        }
        if (last_letter_op.value != ch) {
            return false;
        }
        return true;
    }

    _ to_lowercase :: (str word) {
        for (word) [ch i] {
            @c [word.data[i] = tolower(ch);];
        }
    }
    
    _ to_uppercase :: (str word) {
        for (word) [ch i] {
            @c [word.data[i] = toupper(ch);];
        }
    }

    _ replace_char :: (str word char from char to) {
        for (word) [ch i] {
            if (ch = from) {
                word.data[i]: to;
            }
        }
    }

    bool replace_index :: (str word usize index char to) {
        option[char] at_index: str.at(word index);
        if (at_index.none = true) {
            return false;
        }

        word.data[index]: to;
        return true;
    }
}

# typeid already makes this inlined but explicity is nice
@inline usize size_of :: (typeid T) {
    @c [sizeof(T);];
}

@inline ^char type.to_cstr :: (typeid T) {
    @c [#T;];
}

@inline bool type.compare :: (typeid T typeid K) {
    ^char str_T: type.to_cstr(T);
    ^char str_K: type.to_cstr(K);

    if (c.strcmp(str_T str_K)) {
        return true;
    }

    return false;
}

@inline $T cast :: (typeid T any val) {
    @c [*(T*)&val;];
}

# these are only here to claim the definition, these function is made in the compiler
_ print :: () {} # args: (^char fmt variadic[any] args) also note that "variadic" does not exist lol soz
_ println :: () {} # args: (^char fmt variadic[any] args)

_ panic :: (^char msg) {
    @c [fprintf(stderr, "panic at %s:%d: %s\n", __FILE__, __LINE__, msg);];
    exitcode(1);
}

# runtime assert
_ rt_assert :: (bool expression ^char msg) {
    if (expression) {
        return;
    }

    @c [fprintf(stderr, "assertion failed at %s:%d: %s\n", __FILE__, __LINE__, msg);];
    exitcode(1);
}

# comptime assert
_ ct_assert :: (bool expression ^char msg) {
    # no clue how to do this rn
}
