# Dynamic array library, these functions run IN PLACE and therefore
# the arguments don't need to be passed by reference

@import "base/memory.imp";

struct[T] dyn :: {
    ^$T data;
    usize len;
    usize cap;

    dyn[T] new :: (typeid T) {
        dyn[T] new;
        new.len: 0;
        new.cap: 32;
        new.data: mem.alloc(T new.cap);
        @c [ 
            if (new.data == NULL) {
                panic("failed to allocate memory");
                exit(1);
            }
         ];
        return new;
    }

    # get elemet at index
    option[T] at :: (typeid T dyn[T] arr usize index) {
        option[T] ret;
        ret.none: false;

        if (index >= arr.len) {
            ret.none: true;
            return ret;
        }

        ret.value: arr.data[index];
        return ret;
    }

    _ push :: (typeid T dyn[T] arr $T elem) {
        if ([arr.len + 1] >= arr.cap) {
            arr.cap: [[arr.cap + arr.len + 1] * 2];
            usize T_size: size_of(T);
            arr.data: mem.realloc(arr.data [arr.cap * T_size]);
        }

        arr.data[arr.len]: elem;
        arr.len: [arr.len + 1];
    }

    option[T] pop :: (typeid T dyn[T] arr) {
        option[T] ret: dyn.at(T arr [arr.len - 1]);
        if (!ret.none) {
            arr.len: [arr.len - 1];
        }
        return ret;
    }

    option[T] deque :: (typeid T dyn[T] arr) {
        option[T] ret: dyn.at(T arr [0]);
        if (!ret.none) {
            arr.len: [arr.len - 1];
            arr.data: &arr.data[1];
        }
        return ret;
    }

    # this doesn't actually clear data but instead
    # allows for the data to be overwritten
    _ clear :: (typeid T dyn[T] arr) {
        arr.len: 0;
    }

    _ remove :: (typeid T dyn[T] arr usize index) {
        @c [mem__move(&arr.data[index], &arr.data[index + 1], (arr.len - index - 1) * sizeof(T));];
        arr.len: [arr.len - 1];
    }

    _ dealloc :: (dyn[any] arr) {
        mem.dealloc(arr.data);
        arr.len: 0;
        arr.cap: 0;
    }
}
