# Time library

@import "time.h";

@c [
#ifdef __linux__
    #include <unistd.h>
#endif
];

struct Time :: {
    int second;
    int minute;
    int hour;
    int day;
    int month;
    int year;
    int days_since_jan_first;
    bool is_daylight_savings;

    i64 since_epoch :: () {
        @c [return time(NULL);];
    }

    Time local :: (^i64 since_epoch) {
        Time ret;

        @c [
        struct tm* local_time = localtime(since_epoch);
        ret.second = local_time->tm_sec;
        ret.minute = local_time->tm_min;
        ret.hour = local_time->tm_hour;
        ret.day = local_time->tm_mday;
        ret.month = local_time->tm_mon;
        ret.year = local_time->tm_year;
        ret.days_since_jan_first = local_time->tm_yday;
        ret.is_daylight_savings = local_time->tm_isdst;
        ];

        return ret;
    }

    Time now :: () {
        i64 since_epoch: Time.since_epoch();
        Time local: Time.local(&since_epoch);
        local.year: [local.year + 1900];
        local.month: [local.month + 1];
        return local;
    }

    _ sleep :: (int milliseconds) {
    @c [
        #ifdef _WIN32
            _sleep(milliseconds);
        #elif __linux__
            usleep(milliseconds * 1000);
        #endif
    ];
    }
}

