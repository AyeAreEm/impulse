#union whatever :: {
#    char Char; 
#    i16 Short;
#    int Int;
#}

#_ union.new :: (typeid T int type_arg any value) {
#    $T new;
#    new.type: type_arg;
#    new.data: value;
#    return new;
#}

#$T union.as :: (typeid T any item) {
#    @c [(T*)item.data];
#}

_ main :: () {
    #whatever what: union.new(whatever whatever.Char 100);
    #switch (what.type) { case (whatever.Char) [ch] { println("%d" ch); } case (whatever.Short) { i16 val: union.as(i16 what); println("%d" val); } }

    option[int] num_op: |10 false|;

    #if (num_op) [num] {
    #    println("%d" num);
    #}

    if (!num_op.none) {
        println("%d" num_op.value);
    }
}
